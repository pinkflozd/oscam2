--- module-webif.c
+++ module-webif.c
@@ -2031,34 +2033,113 @@ static char *send_oscam_reader(struct templatevars *vars, struct uriparams *para
 			{
 				tpl_printf(vars, TPLAPPEND, "EXISTING_INS", ",'%s'", urlencode(vars, rdr->label));
 			}
-#ifdef CS_CACHEEX_AIO
-			if(rdr->cacheex.feature_bitfield)
+
+			tpl_addVar(vars, TPLADD, "READERCLASS", rdr->enable ? "enabledreader" : "disabledreader");
+
+			if(rdr->enable) { active_readers += 1; }
+			else { disabled_readers += 1; }
+
+			if(rdr->tcp_connected)
 			{
-				tpl_addVar(vars, TPLADD, "CTYPSORT", (const char*)new_proto);
-				tpl_addVar(vars, TPLADD, "CTYP", (const char*)new_proto);
+				connected_readers += 1;
+				webif_add_client_proto(vars, rdr->client, client_get_proto(rdr->client), apicall);
 
-				if(rdr->cacheex.feature_bitfield & 32)
-					tpl_addVar(vars, TPLADD, "CLIENTPROTOTITLE", rdr->cacheex.aio_version);
-				else if(cl->reader->cacheex.feature_bitfield)
-					tpl_addVar(vars, TPLADD, "CLIENTPROTOTITLE", "[cx-aio < 9.2.3]");
-				else
-					tpl_addVar(vars, TPLADD, "CLIENTPROTOTITLE", "");
+				switch(rdr->card_status)
+				{
+					case CARD_INSERTED:
+						tpl_addVar(vars, TPLADD, "RSTATUS", "online");
+						tpl_addVar(vars, TPLADD, "READERCLASS", "r_connected");
+						break;
+
+					case NO_CARD:
+					case UNKNOWN:
+					case READER_DEVICE_ERROR:
+					case CARD_NEED_INIT:
+					case CARD_FAILURE:
+					default:
+						tpl_addVar(vars, TPLADD, "RSTATUS", "connected");
+						tpl_addVar(vars, TPLADD, "READERCLASS", "r_undefined");
+						break;
+				}
+
+				tpl_addVar(vars, TPLADD, "READERIP", cs_inet_ntoa(rdr->client->ip));
 			}
 			else
 			{
-				tpl_addVar(vars, TPLADD, "CTYPSORT", proto);
-				tpl_addVar(vars, TPLADD, "CTYP", proto);
-			}
-#else
-			tpl_addVar(vars, TPLADD, "CTYP", reader_get_type_desc(rdr, 0));
-			tpl_addVar(vars, TPLADD, "CTYPSORT", reader_get_type_desc(rdr, 0));
-#endif
-			tpl_addVar(vars, TPLADD, "READERCLASS", rdr->enable ? "enabledreader" : "disabledreader");
+				/* default initial values */
+				tpl_addVar(vars, TPLADDONCE, "RSTATUS", "offline");
+				tpl_addVar(vars, TPLADDONCE, "READERIP", "");
+				tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "");
+				tpl_addVar(vars, TPLADDONCE, "CLIENTPROTOSORT", "");
+				tpl_addVar(vars, TPLADDONCE, "CLIENTPROTOTITLE", "");
+				tpl_addVar(vars, TPLADDONCE, "PROTOICON", "");
 
-			if(rdr->enable) { active_readers += 1; }
-			else { disabled_readers += 1; }
+				if(!is_network_reader(rdr) && rdr->enable)
+				{
+					connected_readers += 1;
+					tpl_addVar(vars, TPLADDONCE, "RSTATUS", "active");
+					tpl_addVar(vars, TPLADD, "READERCLASS", "r_connected");
+
+					switch(rdr->typ)
+					{
+						case R_CONSTCW:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "constcw");
+							break;
+
+						case R_DB2COM1:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "db2com1");
+							break;
+
+						case R_DB2COM2:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "db2com2");
+							break;
+
+						case R_MOUSE:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "mouse");
+							break;
+
+						case R_DRECAS:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "drecas");
+							break;
+
+						case R_MP35:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "mp35");
+							break;
+
+						case R_SC8in1:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "sc8in1");
+							break;
+
+						case R_SMART:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "smart");
+							break;
+
+						case R_INTERNAL:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "internal");
+							break;
+
+						case R_SERIAL:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "serial");
+							break;
+
+						case R_PCSC:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "pcsc");
+							break;
+
+						case R_EMU:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "emu");
+							break;
+
+						case R_CS378X:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "cs378x");
+							break;
 
-			if(rdr->tcp_connected) { connected_readers += 1; }
+						default:
+							tpl_addVar(vars, TPLADDONCE, "CLIENTPROTO", "unknown");
+							break;
+					}
+				}
+			}
 
 			if(rdr->description)
 				tpl_printf(vars, TPLADD, "DESCRIPTION","%s(%s)",!apicall?"&#13;":"",xml_encode(vars, rdr->description));
